---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'This template will create the VMs and initialize them with necessary configuration
              to deploy the k8s cluster using KubeSpray Distribution'
Parameters:
  NetworkStackName:
    Description: Name of an active CloudFormation stack that contains the networking
      resources, such as the subnet and security group, that will be used in this
      stack.
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"
    Default: sympan-ha-vpc-stack

  AMI:
    Description: AMI for cluster components
    Type: String
    Default: 'ami-02d55cb47e83a99a0'

  KEYPAIRNAME:
    Description: KeyPair Name
    Type: String
    Default: 'sympn-kp'

Resources:
  ##### ROLES AND POLICIES TO BE ASSIGNED TO THE CLUSTER COMPONENTS #####
  MasterRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"

  MasterPolicies:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "k8s-master-policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'ec2:*'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'elasticloadbalancing:*'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'route53:*'
            Resource: '*'
          - Effect: Allow
            Action:
              - 's3:*'
            Resource: 'arn:aws:s3:::kubernetes-*'
      Roles:
        - Ref: "MasterRole"

  MasterRoleInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        - Ref: "MasterRole"

  WorkerRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"

  WorkerRolePolicies:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "k8s-worker-policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: 's3:*'
            Resource: 'arn:aws:s3:::kubernetes-*'
          - Effect: Allow
            Action: 'ec2:Describe*'
            Resource: "*"
          - Effect: Allow
            Action: 'ec2:AttachVolume'
            Resource: "*"
          - Effect: Allow
            Action: 'ec2:DetachVolume'
            Resource: "*"
          - Effect: Allow
            Action: 'route53:*'
            Resource: "*"
          - Effect: Allow
            Action:
              - 'ecr:GetAuthorizationToken'
              - 'ecr:BatchCheckLayerAvailability'
              - 'ecr:GetDownloadUrlForLayer'
              - 'ecr:GetRepositoryPolicy'
              - 'ecr:DescribeRepositories'
              - 'ecr:ListImages'
              - 'ecr:BatchGetImage'
            Resource: "*"
      Roles:
        - Ref: "WorkerRole"

  WorkerRoleInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        - Ref: "WorkerRole"

  ##### SECURITY GROUPS TO BE ASSIGNED TO THE CLUSTER NODES #####
  NodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "k8s-sg"
      GroupDescription: "Security Group for K8S Node"
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${NetworkStackName}-VPC-ID"

  AllowAllPortsInboundRule:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !GetAtt NodeSecurityGroup.GroupId
      IpProtocol: '-1'
      CidrIp: '0.0.0.0/0'

  ##### CLUSTER NODES #####
  MASTER1:
    DependsOn:
      - NodeSecurityGroup
      - MasterRole
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3a.small
      IamInstanceProfile:
        Ref: MasterRoleInstanceProfile
      KeyName: !Ref KEYPAIRNAME
      SourceDestCheck: 'false'
      ImageId: !Ref AMI
      NetworkInterfaces:
        - GroupSet:
            - Ref: NodeSecurityGroup
          DeviceIndex: '0'
          SubnetId:
            Fn::ImportValue:
              Fn::Sub: "${NetworkStackName}-PRIVATE-SUB1-ID"
      Tags:
        - Key: Name
          Value: master-1
        - Key: 'kubernetes.io/cluster/cluster.local'
          Value: ''
        - Key: 'kubespray-role'
          Value: 'kube-master, etcd'
      UserData:
        Fn::Base64:
          Fn::Join:
            - ''
            - - "#!/bin/bash\n"
              - sudo sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/g' /etc/ssh/sshd_config
              - sudo sed -i 's/.*ssh-rsa/ssh-rsa/g' /root/.ssh/authorized_keys
              - sudo systemctl restart sshd.service
  MASTER2:
    DependsOn:
      - NodeSecurityGroup
      - MasterRole
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3a.small
      IamInstanceProfile:
        Ref: MasterRoleInstanceProfile
      KeyName: !Ref KEYPAIRNAME
      SourceDestCheck: 'false'
      ImageId: !Ref AMI
      NetworkInterfaces:
        - GroupSet:
            - Ref: NodeSecurityGroup
          DeviceIndex: '0'
          SubnetId:
            Fn::ImportValue:
              Fn::Sub: "${NetworkStackName}-PRIVATE-SUB2-ID"
      Tags:
        - Key: Name
          Value: master-2
        - Key: 'kubernetes.io/cluster/cluster.local'
          Value: ''
        - Key: 'kubespray-role'
          Value: 'kube-master, etcd'
      UserData:
        Fn::Base64:
          Fn::Join:
            - ''
            - - "#!/bin/bash\n"
              - sudo sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/g' /etc/ssh/sshd_config
              - sudo sed -i 's/.*ssh-rsa/ssh-rsa/g' /root/.ssh/authorized_keys
              - sudo systemctl restart sshd.service

  WORKER1:
    DependsOn:
      - NodeSecurityGroup
      - WorkerRole
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3a.small
      IamInstanceProfile:
        Ref: WorkerRoleInstanceProfile
      KeyName: !Ref KEYPAIRNAME
      SourceDestCheck: 'false'
      ImageId: !Ref AMI
      NetworkInterfaces:
        - GroupSet:
            - Ref: NodeSecurityGroup
          DeviceIndex: '0'
          SubnetId:
            Fn::ImportValue:
              Fn::Sub: "${NetworkStackName}-PRIVATE-SUB1-ID"
      Tags:
        - Key: Name
          Value: worker-1
        - Key: 'kubernetes.io/cluster/cluster.local'
          Value: ''
        - Key: 'kubespray-role'
          Value: 'kube-node, etcd'
      UserData:
        Fn::Base64:
          Fn::Join:
            - ''
            - - "#!/bin/bash\n"
              - sudo sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/g' /etc/ssh/sshd_config
              - sudo sed -i 's/.*ssh-rsa/ssh-rsa/g' /root/.ssh/authorized_keys
              - sudo systemctl restart sshd.service

  WORKER2:
    DependsOn:
      - NodeSecurityGroup
      - WorkerRole
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3a.small
      IamInstanceProfile:
        Ref: WorkerRoleInstanceProfile
      KeyName: !Ref KEYPAIRNAME
      SourceDestCheck: 'false'
      ImageId: !Ref AMI
      NetworkInterfaces:
        - GroupSet:
            - Ref: NodeSecurityGroup
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          SubnetId:
            Fn::ImportValue:
              Fn::Sub: "${NetworkStackName}-PRIVATE-SUB2-ID"
      Tags:
        - Key: Name
          Value: worker-2
        - Key: 'kubernetes.io/cluster/cluster.local'
          Value: ''
        - Key: 'kubespray-role'
          Value: 'kube-node'
      UserData:
        Fn::Base64:
          Fn::Join:
            - ''
            - - "#!/bin/bash\n"
              - sudo sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/g' /etc/ssh/sshd_config
              - sudo sed -i 's/.*ssh-rsa/ssh-rsa/g' /root/.ssh/authorized_keys
              - sudo systemctl restart sshd.service

  ##### SECURITY GROUPS TO BE ASSIGNED TO THE OTHER NODES IN THE VPC #####
  VPCSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "vpc-sg"
      GroupDescription: "Security Group for K8S Node"
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${NetworkStackName}-VPC-ID"

  AllowAllPortsInboundVPCSGRule:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !GetAtt VPCSecurityGroup.GroupId
      IpProtocol: '-1'
      CidrIp: '0.0.0.0/0'

  ##### PROXY SERVER FOR INGRESS TRAFFIC #####
  PROXY:
    DependsOn:
      - NodeSecurityGroup
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      KeyName: !Ref KEYPAIRNAME
      SourceDestCheck: 'false'
      ImageId: !Ref AMI
      NetworkInterfaces:
        - GroupSet:
            - Ref: VPCSecurityGroup
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          SubnetId:
            Fn::ImportValue:
              Fn::Sub: "${NetworkStackName}-PUBLIC-SUB2-ID"
      Tags:
        - Key: Name
          Value: proxy
      UserData:
        Fn::Base64:
          Fn::Join:
            - ''
            - - "#!/bin/bash\n"
              - sudo sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/g' /etc/ssh/sshd_config
              - sudo sed -i 's/.*ssh-rsa/ssh-rsa/g' /root/.ssh/authorized_keys
              - sudo systemctl restart sshd.service